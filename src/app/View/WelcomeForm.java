package app.View;

import javax.swing.*;
import java.awt.*;

public class WelcomeForm {
    public JButton studentButton;
    public JButton adminButton;
    public JPanel Root;
    public JPanel TopTitlePanel;
    public JPanel ButtonsPanel;
    public JButton librarianButton;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        Root = new JPanel();
        Root.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(6, 1, new Insets(0, 0, 0, 0), -1, -1));
        Root.setBackground(new Color(-1));
        TopTitlePanel = new JPanel();
        TopTitlePanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 30));
        TopTitlePanel.setBackground(new Color(-12620058));
        Root.add(TopTitlePanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Arial", Font.PLAIN, 22, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setForeground(new Color(-1));
        label1.setText("Library Management System");
        TopTitlePanel.add(label1);
        ButtonsPanel = new JPanel();
        ButtonsPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 40));
        ButtonsPanel.setOpaque(false);
        Root.add(ButtonsPanel, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        adminButton = new JButton();
        adminButton.setBackground(new Color(-1));
        adminButton.setBorderPainted(true);
        adminButton.setContentAreaFilled(false);
        Font adminButtonFont = this.$$$getFont$$$("Arial", Font.PLAIN, 16, adminButton.getFont());
        if (adminButtonFont != null) adminButton.setFont(adminButtonFont);
        adminButton.setForeground(new Color(-12620058));
        adminButton.setOpaque(true);
        adminButton.setPreferredSize(new Dimension(120, 70));
        adminButton.setText("Admin");
        ButtonsPanel.add(adminButton);
        librarianButton = new JButton();
        librarianButton.setBackground(new Color(-1));
        Font librarianButtonFont = this.$$$getFont$$$("Arial", Font.PLAIN, 16, librarianButton.getFont());
        if (librarianButtonFont != null) librarianButton.setFont(librarianButtonFont);
        librarianButton.setForeground(new Color(-12620058));
        librarianButton.setOpaque(true);
        librarianButton.setPreferredSize(new Dimension(120, 70));
        librarianButton.setText("Librarian");
        ButtonsPanel.add(librarianButton);
        studentButton = new JButton();
        studentButton.setBackground(new Color(-1));
        Font studentButtonFont = this.$$$getFont$$$("Arial", Font.PLAIN, 16, studentButton.getFont());
        if (studentButtonFont != null) studentButton.setFont(studentButtonFont);
        studentButton.setForeground(new Color(-12620058));
        studentButton.setOpaque(true);
        studentButton.setPreferredSize(new Dimension(120, 70));
        studentButton.setText("Student");
        ButtonsPanel.add(studentButton);
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        Root.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        Root.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer3 = new com.intellij.uiDesigner.core.Spacer();
        Root.add(spacer3, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer4 = new com.intellij.uiDesigner.core.Spacer();
        Root.add(spacer4, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return Root;
    }
}
